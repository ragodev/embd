package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	var pkg, name string
	flag.CommandLine.Usage = func() {
		fmt.Println(`embed a file into go source code
Example: 'embd a.sql' creates a.sql.go which declares
a variable 'a' to be the contents of the sql file.
Example: 'embd -p foo a.sql' creates a.sql.go in package foo.
Options:`)
		flag.CommandLine.PrintDefaults()
	}
	flag.StringVar(&name, "n", "", "name of the variable to generate (default <filename>)")
	flag.StringVar(&pkg, "p", "main", "name of package for file")
	flag.Parse()
	file := flag.Arg(0)
	s, err := ioutil.ReadFile(file)
	if err != nil {
		panic(err)
	}
	if name == "" {
		_, fn := filepath.Split(file)
		name = strings.Split(fn, ".")[0]
	}
	out, err := os.OpenFile(file+".go", os.O_CREATE|os.O_RDWR, 0666)
	if err != nil {
		panic(err)
	}
	defer out.Close()
	fmt.Fprintln(out, "//generated by embd")
	fmt.Fprintf(out, "package %s\n\n", pkg)
	fmt.Fprintf(out, "const %s = %q", name, strings.TrimSpace(string(s)))
}
